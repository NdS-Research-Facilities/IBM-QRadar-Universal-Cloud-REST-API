<?xml version="1.0" encoding="UTF-8" ?>
<!--

Authors : Rohan Parab @encryptedguy / Nico de Smidt @nds
Product : 1Password
Description : Set log source identifier in parameters file

-->
<Workflow name="1Password" version="1.1" minimumRecurrence="5" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2" >

    <Parameters>
		<Parameter name="app_url" label="1Password URL endpoint" required="true" />
		<Parameter name="lsi"     label="logsource identifier" required="false" default="1Password" />
		<Parameter name="token"   label="token" required="true" />
    </Parameters>


<!-- 
test with /opt/qradar/bin/test-workflow.sh -v -w 1password.workflow.xml -wp 1password.workflow.parameters.xml -s 1password.workflow.states.xml 
-->

<!-- 	
<?xml version="1.0" encoding="UTF-8" ?>
<WorkflowParameterValues xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/WorkflowParameterValues/V2">
	<Value name="app_url" value="events.1password.com/api/v1/auditevents" />
	<Value name="lsi"     value="1Password" />
	<Value name="token"   value="FILL ME" />	
</WorkflowParameterValues>
-->

    <Actions>
		<Initialize path="/workflowname" value="1Passsword" />
		<Log type="INFO" message="${/workflowname}: START" />
		<Set path="/log_source_identifier" value="${/lsi}" />
		
		<Log type="INFO" message="${/workflowname}: INIT: /keep/lastUUID ${/keep/lastUUID}" />
	    <Initialize path="/keep/lastUUID" value="" /> <!-- init UUID if not set already -->    

		<Set path="/work/limit" value="20" />   <!-- init limit if not set already --> 
		<Set path="/work/next_cursor" value="" /> <!-- push for a reset_cursor -->
		<Set path="/work/next_requestbody" value='"limit":${/work/limit}' />
		<Set path="/work/stopWhileLoop" value="0" />
	
	    <!-- Call the endpoint to see if we can get a newer (single) entry -->
		<!-- This assumes that the first record we get back is also the latest and everything down from here is older -->
	    <Log type="INFO" message="${/workflowname}: GET FIRST EVENTS" />
		<Delete path="/work/lastUUID" /> <!-- make sure we clear the lastUUID work path as we need only the first record through init below-->

        <While condition="/work/stopWhileLoop != 1" > <!-- There are still events to post to QRadar / make sure not to use the /work/ce as these contain only the logins -->
            <Log type="INFO" message="${/workflowname}: MAKE API CALL" />
			<Log type="DEBUG" message="${/workflowname}: before callEndpoint next_requestbody: ${/work/next_requestbody}" />
            <CallEndpoint url="https://${/app_url}" method="POST" savePath="/get_events">
			    <RequestHeader  name="Authorization" value="Bearer ${/token}"/>
                <RequestHeader  name="Content-Type"  value="application/json" />   
                <RequestHeader  name="User-Agent"    value="IBM-QRadar/7.5" />
				<RequestBody type="application/json" encoding="UTF-8">{${/work/next_requestbody}}</RequestBody>
            </CallEndpoint>

	    	<Log type="DEBUG" message="${/workflowname}: we good ? ${/get_events}" />
		
			<If condition="/get_events/status_code != 200">
				<Log type="ERROR" message="${/workflowname}: ERROR ${/get_events/status_code} : ${/get_events/status_message} \n\n ${/get_events/body}" />
				<Abort reason="${/workflowname}: ERROR ${/get_events/status_code} : ${/get_events/status_message} \n ${/get_events/body}" />
        	</If>

			<Initialize path="/work/lastUUID" value="${/get_events/body/items[0]/uuid}"/> <!-- move the new eventUUID to work, use `Initialize` as we only want the latest entry    -->
			<Log type="INFO" message="${/workflowname}: newest uuid from first API call ${/work/lastUUID}" />

			<Set path="/work/next_cursor" value="${/get_events/body/cursor}" />   <!-- update next cursor -->
			<Log type="DEBUG" message="${/workflowname}: cursor returned ${/get_events/body/cursor}" />

    		<!-- did we get a record back  -->
			<Log type="INFO" message="${/workflowname}: API Call returned ${count(/get_events/body/items)} records" />

    		<If condition="count(/get_events/body/items) = 0" >
    	    	<Abort reason="${/workflowname}: no records found" />
    		</If>

            <!-- Post Events util we find the lastUUID -->
			<Log type="DEBUG" message="${/workflowname}: ${/ce/uuid} Start selecting events for QRadar pipeline" />
            <ForEach item="/ce" items="/get_events/body/items" >
                <If condition="/ce/uuid != /keep/lastUUID and /work/stopWhileLoop != 1" >
                    <!-- do this when we got newer timestamps and the eventhash is not already the last (/keep/lastUUID) -->
                    <Log type="INFO" message="${/workflowname}: PUSH ${/ce/uuid} into QRadar pipeline" />
                    <Log type="DEBUG" message="${/workflowname}: CE = ${/ce}" />
                    <PostEvent path="/ce" source="${/log_source_identifier}"/> <!-- let's post it to the QRadar eventPipeline -->
                </If>
                <Else>
                    <Log type="INFO" message="${/workflowname}: MATCH FOUND /ce/uuid ${/ce/uuid}, skipping" />
                    <Set path="/work/stopWhileLoop" value="1" /> <!-- stop while loop after ForEach finishes-->
                </Else>
			</ForEach>

			<If condition="/get_events/body/has_more != true" >  <!-- we have no more pages -->
				<Log type="INFO" message="${/workflowname}: NO more pages found" />
				<Set path="/work/stopWhileLoop" value="1" /> <!-- stop while loop after ForEach finishes-->
			</If>
			<Else> <!-- we DO have more pages -->
				<Log type="INFO" message="${/workflowname}: There are more pages to retrieve" />
				<Set path="/work/limit" value="10" />   <!-- update limit to get more records at once -->		
				<Set path="/work/next_cursor" value="" />   <!-- update next cursor -->
				<Set path="/work/next_cursor" value="${/get_events/body/cursor}" />   <!-- update next cursor -->
				<Log type="DEBUG" message="${/workflowname}: /work/next_cursor: ${/work/next_cursor}" />
				<Set path="/work/next_requestbody" value='"cursor":"${/work/next_cursor}"' />
				<Log type="DEBUG" message="${/workflowname}: /work/next_requestbody ${/work/next_requestbody}" />
			</Else>

			<Set path="/keep/lastUUID" value="${/work/lastUUID}" /> <!-- move the newest UUID to keep-->

			<Log type="DEBUG" message="${/workflowname}: return to start of while loop" />
		</While>
		<Log type="INFO" message="${/workflowname}: END" />
	</Actions>
	
	<Tests>
		<DNSResolutionTest host="${/app_url}"/>
		<TCPConnectionTest host="${/app_url}"/>
		<SSLHandshakeTest host="${/app_url}" />
		<HTTPConnectionThroughProxyTest url="https://${/app_url}"/>
	</Tests>
</Workflow>
